[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"

  # Set idle timeout to unlimited
  SET_IDLE_TIMEOUT TIMEOUT=999999999

  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}



[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  







  # Use the PAUSE macro direct in your M600:
  #e.g. with a different park position front left and a minimal height of 50 
[gcode_macro M600]
gcode: 
    TRACK_TOOL_CHANGE
    SHOW_TOOL_CHANGE_STATUS
    PAUSE X=10 Y=10 Z_MIN=50
    
    # Save the current temperature
    {% set current_temp = printer.extruder.temperature %}
    
    # Cool down to 185°C to prevent oozing
    M109 S185
    
    # Retract filament in two steps (45mm +45mm)
    G91                          ; Set to relative positioning
    G1 E-45 F300                 ; Retract 45mm
    G1 E-45 F300                 ; Retract another 45mm (total 90mm)
    G90                          ; Set back to absolute positioning
    
    # Wait for user to resume the print
    RESPOND TYPE=echo MSG="Filament swap ready. Insert new filament and resume print."
    
    # When the user resumes:
    M109 S{current_temp}          ; Restore original temperature
    G28 X Y                      ; Re-home X and Y
    G92 E0                        ; Reset extruder position
    G1 E20 F300                   ; Prime 20mm of filament
    G1 X50 Y10 F3000              ; Wipe nozzle

    
[gcode_macro GET_PRINT_FILENAME]
gcode:
    RESPOND TYPE=echo MSG="Current print file: {job_print_filename}"
    



[gcode_macro PRE_SCAN_TOOL_CHANGES]
gcode:
    {% set path = printer.virtual_sdcard.path ~ '/' ~ printer.print_stats.filename %}
    RUN_SHELL_COMMAND CMD=pre_scan_tool_changes PARAMS='"/home/cody/printer_data/gcodes/{printer.print_stats.filename}"'

[gcode_macro SAVE_PRINT_FILE]
variable_print_file: ""
gcode:
    SET_GCODE_VARIABLE MACRO=SAVE_PRINT_FILE VARIABLE=print_file VALUE={job_print_filename}
    RESPOND TYPE=echo MSG="Saved print file: {print_file}"

[gcode_macro SHOW_TOOL_CHANGE_STATUS]
gcode:
    RESPOND TYPE=echo MSG="Fetching tool change status..."
    RUN_SHELL_COMMAND CMD=get_tool_change_status
    DISPLAY_STATUS MSG="Tool Change {printer['gcode_macro TRACK_TOOL_CHANGE'].current_change} of {printer['gcode_macro TRACK_TOOL_CHANGE'].total_changes} - {printer['gcode_macro TRACK_TOOL_CHANGE'].color} (T{printer['gcode_macro TRACK_TOOL_CHANGE'].tool_number})"


[gcode_shell_command update_tool_change]
command: python3 /home/cody/update_tool_change.py
timeout: 10.
verbose: True

[gcode_macro TRACK_TOOL_CHANGE]
gcode:
    RESPOND TYPE=echo MSG="Processing tool change..."
    RUN_SHELL_COMMAND CMD=update_tool_change

[gcode_shell_command pre_scan_tool_changes]
command: python3 /home/cody/tool_change_tracker.py scan
timeout: 10.
verbose: True




[gcode_shell_command track_tool_change]
command: sh /home/cody/tool_change_tracker.sh
timeout: 10.
verbose: True

[gcode_shell_command get_tool_change_status]
command: sh /home/cody/get_tool_change_status.sh
timeout: 2.
verbose: True

